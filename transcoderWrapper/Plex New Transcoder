#!/usr/bin/python
# Version 0.2.1 - Weston Nielson <wnielson@github>
#

import cgi
import filecmp
import json
import codecs
import logging
import logging.config
import multiprocessing
import io
import os
import base64
import requests
import pipes
import re
import shlex
import shutil
import subprocess
import sys
import time
import urlparse
#import urllib.parse as urlparse

from distutils.spawn import find_executable

log = logging.getLogger("prt")
TRANSCODER_DIR  = "/usr/lib/plexmediaserver/Resources/"
PUBLIC_DOMAIN = "segator.segator.es"
PRIVATE_WEB_DOMAIN = "192.168.0.133"
LD_LIBRARY_PATH = "/usr/lib/plexmediaserver/"
LOG_PATH        = "/config/Library/Application Support/Plex Media Server/Logs/"
NEW_TRANSCODER_NAME = "plex_transcoder"
DEFAULT_CONFIG = {
    "ipaddress": "",
    "path_script":    None,
    "servers_script": None,
    "servers":   {},
    "logging":   {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": {
            "simple": {
                "format": "%(asctime)s - %(levelname)s - %(message)s"
            }
        },
        "handlers": {
            "file_handler": {
                "class": "logging.handlers.RotatingFileHandler",
                "level": "INFO",
                "formatter": "simple",
                "filename": LOG_PATH + "Plex Remote Transcoder.log",
                "maxBytes": 10485760,
                "backupCount": 20,
                "encoding": "utf8"
            },
        },
        "loggers": {
            "prt": {
                "level": "DEBUG",
                "handlers": ["file_handler"],
                "propagate": "no"
            }
        }
    }
}

def setup_logging():
    config = DEFAULT_CONFIG.copy()
    logging.config.dictConfig(config["logging"])

def get_transcoder_path(name=NEW_TRANSCODER_NAME):
    return os.path.join(TRANSCODER_DIR, name)

def transcode_local():
    #os.environ["LD_LIBRARY_PATH"] = "%s" % LD_LIBRARY_PATH
    args = [get_transcoder_path()] + sys.argv[1:]
    log.info("Launching command line: %s\n" % str(args))

    session = get_transcode_session_details(args)
    log.info("Session details: %s" % str(session))
    
    #log.info("User %s wants to launch Remote Transcoding with next args:%s" % (session['X-Plex-Token'],args))
    #modifiedArgs = parseParams(args)
    #modifiedArgs = args   
    #time.sleep(90)
    # Spawn the process
    REMOTE_ARGS = ("export LD_LIBRARY_PATH=%(ld_path)s;"
               "cd %(working_dir)s;"
               "%(args)s")

    transcoderVM = getTranscoder(session)
    firstRequest = time.time()
    timeout = False
    while (transcoderVM['machineStatus']!='active') & (timeout == False):
        log.info("Transcoder %s - %s is not ready waitting for ready" % (transcoderVM['machineID'],transcoderVM['name']))
        time.sleep(2)
        timeout = (time.time()-firstRequest) > 180
        transcoderVM = getTranscoder(session)

    if timeout == False:
       log.info("Transcoder %s - %s is ready to transcode" % (transcoderVM['machineID'],transcoderVM['name']))
       #Find media file and replace to WebServer URL
       posInput = args.index("-i")
       mediaFilePath = args[posInput+1]
       if not mediaFilePath.startswith("http"):
          encodedMediaFilePath=base64.b64encode(mediaFilePath)
          args[posInput+1] = "http://"+PUBLIC_DOMAIN+":8800/download/"+str(transcoderVM['machineID'])+"/"+encodedMediaFilePath+"?absolute=0"
       log.info(str(args))
       command = REMOTE_ARGS % {
           "ld_path":      "%s" % LD_LIBRARY_PATH,
           "working_dir":  os.getcwd(),
           "args":         ' '.join([pipes.quote(a) for a in args])
       }

       command = command.replace("127.0.0.1", PUBLIC_DOMAIN)
       #args = ["/usr/bin/ssh","-o","StrictHostKeyChecking=no", "%s@%s" % ("root", transcoderVM['ip'])]
       args = ["/usr/bin/ssh","-o","StrictHostKeyChecking=no", "%s@%s"  % ("root", transcoderVM['ip']), "%s" % str(command)]
       log.info("Executing Remote Transcoding:%s" % str(args))
       proc = subprocess.Popen(args)
       proc.wait()


def getTranscoder(session):
    headers = {'content-type': 'application/json'}
    response = requests.post("http://"+PRIVATE_WEB_DOMAIN+":8800/getTranscoder", json=session)
    reader = codecs.getreader("utf-8")
    binary = response.content
    return json.loads(response.content.decode('utf-8'))

def get_transcode_session_details(args):
    """
    Extracts the session details from the Plex log file.  It does this by
    looking for all lines that contain a call to "/video/:/transcode/" and
    extracting the associated session data.  If session data was successfully
    found, this returns a `dict` similar to the following:
        {'Accept-Language':          'en',
         'X-Plex-Client-Identifier': '12345678',
         'X-Plex-Device':            'OSX',
         'X-Plex-Device-Name':       'Plex Web (Safari)',
         'X-Plex-Platform':          'Safari',
         'X-Plex-Platform-Version':  '9.0',
         'X-Plex-Product':           'Plex Web',
         'X-Plex-Username':          'wnielson',
         'X-Plex-Version':           '2.4.23',
         'audioBoost':               '100',
         'directPlay':               '0',
         'directStream':             '1',
         'fastSeek':                 '1',
         'mediaIndex':               '0',
         'offset':                   '0',
         'partIndex':                '0',
         'path':                     'http://127.0.0.1:32400/library/metadata/8',
         'protocol':                 'hls',
         'session':                  '6sfg5w1xv5c',
         'subtitleSize':             '100',
         'subtitles':                'burn'}
    """
    session_details = {}
    
    # Try to find the session ID in the args
    session_id = None
    for arg in args:
        if arg.find("video/:/transcode") > -1:
            session_id = arg.split("transcode/session/")[-1].split("/")[0]
            break

    # Open the plex log file and look for the session details
    fh = None
    if session_id:
        try:
            fh = io.open((LOG_PATH+"Plex Media Server.log"), "r",encoding='utf-8', errors='ignore')
        except Exception, e:
            log.error(e)
            log.info("Couldn't open Plex log file: %s" % LOG_PATH+"Plex Media Server.log")

    if fh:
        # Seek back from the end of the log file
        #fh.seek(-8192, 2)
        for line in fh.readlines():
            if line.find("/video/:/transcode/") > -1:
                url = urlparse.urlparse(line.split("/video/:/transcode/")[-1].split(" ")[0])
                details = dict(cgi.parse_qsl(url.query))
                if details.get("session") == session_id:
                    session_details.update(details)
        fh.close()
    return session_details

def requireRemoveParam(param,removableParams):
    for removableParam in removableParams:
        if removableParam[0] == '*':
            return param == removableParam.replace(removableParam[:1], '')
        elif param.find(removableParam) > -1:
            return 1
    return 0

def requireModifyParam(param,modifyParams):
    for modifyParam in modifyParams:
        if param.find(modifyParam[0]) > -1:
            return modifyParam[1]
    return None



def parseParams(arguments):
    removeParams = ['-filter_complex','-crf','-pix_fmt','-preset','-x264opts','-force_key_frames','-maxrate','-bufsize','-level','-map_inlineass']
    replaceParams = [['libx264','copy'],['[0]','0:0']]

    newArgs = []
    nextArgJump=0
    for arg in arguments:
        if arg.find("video/:/transcode") > -1:
           arg = arg.replace("127.0.0.1:32400","192.168.0.133:8800")
        if requireRemoveParam(arg,removeParams)==1:
            nextArgJump=1
        elif nextArgJump==0:
            newArgs.append(arg)
        else:
            nextArgJump=0

    newArgsModified = []
    for arg in newArgs:
        nextReplaceParamPosible = requireModifyParam(arg,replaceParams)
        if nextReplaceParamPosible is not None:
            newArgsModified.append(nextReplaceParamPosible)
            if nextReplaceParamPosible == "copy":
                #Internet explorer segment_format mpegts require mp4toannexb to work
                if "-segment_format" in arguments:
                    pos = arguments.index("-segment_format")
                    if arguments[pos+1] == "mpegts"  and "h264_mp4toannexb,h264_plex" not in arguments:
                        newArgsModified.append('-bsf:0')
                        newArgsModified.append('h264_mp4toannexb,h264_plex')

        else:
            newArgsModified.append(arg)
    #newArgsModified.append('-map')
    #newArgsModified.append('0')
    return newArgsModified

setup_logging()
try:
    sys.exit(transcode_local())
except Exception, e:
    log.error(e)
